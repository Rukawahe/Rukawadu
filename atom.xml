<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MyBlog -Rukawahe</title>
  
  <subtitle>Pursuit of excellence...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-18T10:10:29.611Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Rukawahe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dag模型</title>
    <link href="http://yoursite.com/2020/03/18/dag%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/03/18/dag模型/</id>
    <published>2020-03-18T09:43:28.144Z</published>
    <updated>2020-03-18T10:10:29.611Z</updated>
    
    <content type="html"><![CDATA[<p>关于dag模型紫书也介绍了不少，总结如下：<br>dag最长路(短)路的特殊性，有两种”对称”的状态定义方式：</p><blockquote><p>状态1：设d(i)为从i出发的最长路，则d(i)=max{d(j)+1|(i,j)∈E}<br>状态2：设d(i)为从i结束的最长路，则d(i)=max{d(j)+1|(j,i)∈E}<br>另外一般使用状态2不容易反推，建议使用刷表法</p></blockquote><p>例题：UVa437</p><blockquote><p>给n个立方体，给出长宽高XYZ。现在希望你将这些立方题叠起来，使得最后的高度最大，并且这些立方体是可以无限次使用的，但是一个立方体要在另一个立方体的上面的话是需要满足这个立方体的底面是可以完全包含在下面的那个立方体的底面。</p></blockquote><blockquote><p>分析：这就是个dag模型，嵌套模型。<br>注意本题中x,y,z均可以作为高，所以有3*n状态<br>状态转移方程为：<br>d(i)=max{d(j)+(i号长方体的高） | (i,j)∈E }<br>状态总数为n，每个状态的决策数为n，总时间复杂度为O(n²) </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">AC code:</span><br><span class="line">#include&lt;iostream&gt;//dag模型</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int MAXN=90+5;</span><br><span class="line">int d[MAXN],n;</span><br><span class="line">struct Node&#123;</span><br><span class="line">    int x,y,z;</span><br><span class="line">&#125;;</span><br><span class="line">Node arr[MAXN];</span><br><span class="line">int dp(int i)&#123;</span><br><span class="line">    int &amp;ans=d[i];</span><br><span class="line">    if(ans&gt;0)   return ans;</span><br><span class="line">    ans=arr[i].z;//首先等于长方体的高</span><br><span class="line">    for(int j=0;j&lt;3*n;j++)</span><br><span class="line">        if((arr[i].x&gt;arr[j].x &amp;&amp; arr[i].y&gt;arr[j].y) || (arr[i].x&gt;arr[j].y &amp;&amp; arr[i].y&gt;arr[j].x ))</span><br><span class="line">            ans=max(ans,dp(j)+arr[i].z);</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    int ans=0;</span><br><span class="line">    memset(d,0,sizeof(d));</span><br><span class="line">    for(int i=0;i&lt;3*n;i+=3)&#123;</span><br><span class="line">        int x,y,z;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">        //注意这里有三种摆放方式</span><br><span class="line">        arr[i].x=x;arr[i].y=y;arr[i].z=z;//分别(x,y,z)为高</span><br><span class="line">        arr[i+1].x=x;arr[i+1].y=z;arr[i+1].z=y;</span><br><span class="line">        arr[i+2].x=y;arr[i+2].y=z;arr[i+2].z=x;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=0;i&lt;3*n;i++)</span><br><span class="line">        ans=max(ans,dp(i));</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于dag模型紫书也介绍了不少，总结如下：&lt;br&gt;dag最长路(短)路的特殊性，有两种”对称”的状态定义方式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;状态1：设d(i)为从i出发的最长路，则d(i)=max{d(j)+1|(i,j)∈E}&lt;br&gt;状态2：设d(i)为从i结
      
    
    </summary>
    
    
    
      <category term="dp动态规划" scheme="http://yoursite.com/tags/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>dp填表法和刷表法</title>
    <link href="http://yoursite.com/2020/03/17/dp%E5%88%B7%E8%A1%A8%E6%B3%95%E5%92%8C%E5%A1%AB%E8%A1%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2020/03/17/dp刷表法和填表法/</id>
    <published>2020-03-17T09:51:06.907Z</published>
    <updated>2020-03-18T10:09:49.922Z</updated>
    
    <content type="html"><![CDATA[<p>紫书里dp中简单介绍了下”填表法”和”刷表法”</p><blockquote><p>填表法：对于每个状态i,计算f(i),其实就是根据状态方程从<strong>之前点</strong>推导出来</p></blockquote><blockquote><p>刷表法：对于每个状态i,<strong>更新f(i)所影响到的状态</strong>，注意只有当每个状态所依赖的状态对它的影响相互独立才能用刷表法。<br>利用当前推关联，利用刷表法较为便捷，向上边界较容易处理，处理在本次循环中的影响</p></blockquote><p>比如dag模型中的硬币问题：</p><blockquote><p>状态：设d(i)为以i结束的最长路，则d(i)=max{d(j)+1}|(j,i)属于E} ,对应每个顶点i，可能有多个边，同时枚举边(i,j),然后更新d[j]=max(d[j],d[i]+1),每个d(i)可能对应着多个d(j)。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;紫书里dp中简单介绍了下”填表法”和”刷表法”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;填表法：对于每个状态i,计算f(i),其实就是根据状态方程从&lt;strong&gt;之前点&lt;/strong&gt;推导出来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;刷表法：
      
    
    </summary>
    
    
    
      <category term="dp动态规划" scheme="http://yoursite.com/tags/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>c++创建二位数组</title>
    <link href="http://yoursite.com/2020/02/24/c-%E5%88%9B%E5%BB%BA%E4%BA%8C%E4%BD%8D%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2020/02/24/c-创建二位数组/</id>
    <published>2020-02-24T08:50:58.000Z</published>
    <updated>2020-02-24T09:53:08.841Z</updated>
    
    <content type="html"><![CDATA[<h3 id="静态数组"><a href="#静态数组" class="headerlink" title="静态数组"></a>静态数组</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>数组是一种复合类型，因此在定义数组类型时必须显示定义数组的类型，不能使用auto关键字。静态数组定义形如：<strong>a[d]</strong>,a是数组名字，d是数组维度。维度说明数组大小，所有d&gt;0。同时数组维度必须是一个常量表达式(常量表达式是指不会改变且在编译过程就能得到计算结果的表达式)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">一维静态数组初始化：</span><br><span class="line">int a[10];</span><br><span class="line">int a[]=&#123;1,2,3,4,5&#125;;//如果进行初始化，则可不用指出维度</span><br><span class="line">int a[];  //error</span><br><span class="line"></span><br><span class="line">二维静态数组初始化:</span><br><span class="line">注意：在进行多维数组初始化话时，如果不进行初始化，则需要指出每个维度的大小；否则，可以不用指出最高维度的大小(即第一维度)</span><br><span class="line">int a[10][10];</span><br><span class="line">int a[][10]=&#123;0,1,2,3&#125;;</span><br><span class="line">int a[][10];//error</span><br></pre></td></tr></table></figure></p><h3 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>不需要再编译时确定大小，再程序运行时确定大小，根据程序需要而灵活地分配大小，但是动态数组需要显示地释放内存。<br>动态数组进行内存分配的格式为new T[size]，size可以不是常量表达式；如下面的例子所示。<br><strong>一维动态数组：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">int size=10;</span><br><span class="line"></span><br><span class="line">int *arr=(int*)malloc(sizeof(int)*100);//c方式</span><br><span class="line"></span><br><span class="line">int *arr=new int[size];//c++方式，未初始化</span><br><span class="line"></span><br><span class="line">int *arr=new int[size]();//默认初始化，里面值全部为零</span><br><span class="line"></span><br><span class="line">int *arr=new int[size]&#123;1,2,3,4,5,6&#125;;//显示初始化</span><br><span class="line"></span><br><span class="line">释放内存：</span><br><span class="line">delete []arr;</span><br><span class="line">释放一个动态数组时，或者说是指向数组的指针时，空括号是必须的。它告诉编译器，指针指向一个数组的第一个元素。</span><br><span class="line">delete释放数组是逆序进行的，最后一个元素被最先释放，第一个元素最后一个被释放。</span><br></pre></td></tr></table></figure></p><p><strong>多维动态数组</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">以二维为例：</span><br><span class="line"></span><br><span class="line">        new方式：</span><br><span class="line">int col=3,row=3,MAXN=10;</span><br><span class="line"></span><br><span class="line">double **arr=new double*[row];//row行</span><br><span class="line">for(int i=0;i&lt;row;i++)&#123;</span><br><span class="line">    arr[i]=new int[col];//col列</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">释放内存：</span><br><span class="line">for(int i=0;i&lt;row;i++)&#123;</span><br><span class="line">    delete[] arr[i];</span><br><span class="line">&#125;</span><br><span class="line">delete[] arr;</span><br><span class="line">从最低维度开始释放，直到最高维度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        用变量定义二维数组的长度方式：</span><br><span class="line">int len=100;</span><br><span class="line">int **arr=(int **)malloc(sizeof(int)*len);</span><br><span class="line">for(int i=0;i&lt;len;i++)&#123;</span><br><span class="line">    arr[i]=new int[col];//每一行申请col个int空间</span><br><span class="line">&#125;</span><br><span class="line">释放内存同上......</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;静态数组&quot;&gt;&lt;a href=&quot;#静态数组&quot; class=&quot;headerlink&quot; title=&quot;静态数组&quot;&gt;&lt;/a&gt;静态数组&lt;/h3&gt;&lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h
      
    
    </summary>
    
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>dp平行四边形优化</title>
    <link href="http://yoursite.com/2020/02/19/dp%E5%B9%B3%E8%A1%8C%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2020/02/19/dp平行四边形优化/</id>
    <published>2020-02-19T13:38:04.000Z</published>
    <updated>2020-02-19T13:56:52.687Z</updated>
    
    <content type="html"><![CDATA[<h4 id="区间dp优化"><a href="#区间dp优化" class="headerlink" title="区间dp优化"></a>区间dp优化</h4><h4 id="四边形不等式优化条件"><a href="#四边形不等式优化条件" class="headerlink" title="四边形不等式优化条件"></a>四边形不等式优化条件</h4><p>在动态规划中，经常遇到形如下式的转台转移方程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">上述的m(i,j)表示区间[i,j]上的某个最优值。w(i,j)表示在转移时需要额外付出的代价。该方程的时间复杂度为O(N^3)。</span><br><span class="line"></span><br><span class="line">下面我们通过四边形不等式来优化上述方程，首先介绍什么是&quot;区间包含的单调性“和&quot;四边形不等式&quot;</span><br><span class="line">**（1）区间包含的单调性**:如果对于i≤i&apos;&lt;j≤j&apos;，有w(i&apos;,j)≤w(i,j&apos;)，那么说明w具有区间包含的单调性。（可以形象理解为如果小区间包含于大区间中，那么小区间的w值不超过大区间的w值）</span><br><span class="line"></span><br><span class="line">**（2）四边形不等式**：如果对于i≤i&apos;&lt;j≤j&apos;，有w(i,j)+w(i&apos;,j&apos;)≤w(i&apos;,j)+w(i,j&apos;)，我们称函数w满足四边形不等式。（可以形象理解为两个交错区间的w的和不超过小区间与大区间的w的和）</span><br><span class="line"></span><br><span class="line">下面给出两个定理:</span><br><span class="line">**定理一**：如果上述的w函数同时满足区间包含单调性和四边形不等式性质，那么函数m也满足四边形不等式性质。</span><br><span class="line"></span><br><span class="line">我们再定义s(i,j)表示m(i,j)取得最优值时对应的下标（即i≤k≤j时，k处的w值最大，则s(i,j)=k）。此时有如下定理</span><br><span class="line">**定理二**：假如m(i,j)满足四边形不等式，那么s(i,j)单调，即s(i,j)≤s(i,j+1)≤s(i+1,j+1)。</span><br><span class="line"></span><br><span class="line">好了，有了上述的两个定理后，我们发现如果w函数满足区间包含单调性和四边形不等式性质，那么有s(i,j-1)≤s(i,j)≤s(i+1,j)。即原来的状态转移方程可以改写为下式：</span><br><span class="line">```m(i,j)=min&#123;m(i,k-1),m(k,j)&#125;+w(i,j)(s(i,j-1)≤k≤s(i+1,j))（min也可以改为max）</span><br></pre></td></tr></table></figure></p><p>由于这个状态转移方程枚举的是区间长度L=j-i，而s(i,j-1)和s(i+1,j)的长度为L-1，是之间已经计算过的，可以直接调用。不仅如此，区间的长度最多有n个，对于固定的长度L，不同的状态也有n个，故时间复杂度为O(N^2)，而原来的时间复杂度为O(N^3),实现了优化！今后只需要根据方程的形式以及w函数是否满足两条性质即可考虑使用四边形不等式来优化了。</p><h4 id="例题：poj3506"><a href="#例题：poj3506" class="headerlink" title="例题：poj3506"></a>例题：poj3506</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">AC代码：</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#define MAXN 2020</span><br><span class="line">using namespace std;</span><br><span class="line">const int INF = 0x3f3f3f3f;</span><br><span class="line">int dp[MAXN][MAXN],a[MAXN],sum[MAXN],s[MAXN][MAXN];//s(i,j)表示dp(i,j)取得最优值时对应的下标（即i≤k≤j时，k处的w值最大，则s(i,j)=k）</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n;</span><br><span class="line">    while(~scanf(&quot;%d&quot;,&amp;n))&#123;</span><br><span class="line">        sum[0]=0;</span><br><span class="line">        memset(dp,0x3f,sizeof(dp));</span><br><span class="line"></span><br><span class="line">        for(int i=1;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line"></span><br><span class="line">            sum[i]=sum[i-1]+a[i];</span><br><span class="line"></span><br><span class="line">            s[i][i]=i;</span><br><span class="line"></span><br><span class="line">            dp[i][i]=0;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int i=1;i&lt;n;i++)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            sum[i+n]=sum[i+n-1]+a[i];</span><br><span class="line"></span><br><span class="line">            s[i+n][i+n]=i+n;</span><br><span class="line"></span><br><span class="line">            dp[i+n][i+n]=0;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int len=2;len&lt;=n;len++)&#123;</span><br><span class="line">            for(int i=1;i&lt;=2*n-1;i++)&#123;</span><br><span class="line">                int j=i+len-1;</span><br><span class="line">                 if(j&gt;2*n-1) </span><br><span class="line">                    break;</span><br><span class="line">                /*for(int k=i;k&lt;j &amp;&amp; k&lt;2*n-1;k++)&#123;</span><br><span class="line">                    dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1]);</span><br><span class="line">                &#125;</span><br><span class="line">                */</span><br><span class="line">                //进行四边形优化处理</span><br><span class="line">                for(int k=s[i][j-1];k&lt;=s[i+1][j];k++)&#123;</span><br><span class="line">                    if(dp[i][j]&gt;dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1])&#123;</span><br><span class="line">                        dp[i][j]=dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1];</span><br><span class="line">                        s[i][j]=k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int ans=INF;</span><br><span class="line">        for(int i=1;i&lt;=n;i++)</span><br><span class="line">            ans=min(ans,dp[i][i+n-1]);</span><br><span class="line">        printf(&quot;%d\n&quot;,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;区间dp优化&quot;&gt;&lt;a href=&quot;#区间dp优化&quot; class=&quot;headerlink&quot; title=&quot;区间dp优化&quot;&gt;&lt;/a&gt;区间dp优化&lt;/h4&gt;&lt;h4 id=&quot;四边形不等式优化条件&quot;&gt;&lt;a href=&quot;#四边形不等式优化条件&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>WAN</title>
    <link href="http://yoursite.com/2020/02/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2020/02/14/计算机网络/</id>
    <published>2020-02-14T03:15:09.666Z</published>
    <updated>2020-03-18T10:08:58.971Z</updated>
    
    <content type="html"><![CDATA[<p>一些概念：</p><h2 id="WAN"><a href="#WAN" class="headerlink" title="WAN:"></a>WAN:</h2><p>A wide area network (WAN) is a telecommunications network that extends over a large geographical area for the primary purpose of computer networking.广域网（WAN）是一个电信网络上延伸为的主要目的一个大的地理区域的计算机网络。广域网通常通过租用的电信线路来建立。<br>Similar types of networks are personal area networks (PANs), local area networks (LANs), campus area networks (CANs), or metropolitan area networks (MANs) which are usually limited to a room, building, campus or specific metropolitan area, respectively.<br>类似类型的网络是个人区域网络（PAN），局域网（LAN），园区网络（CAN）或城域网（MAN），它们通常分别限于房间，建筑物，校园或特定的城域。</p><p><strong>举个简单例子：</strong><br><img src="http.png" alt="alt text" title="Title"></p><p>假如我想在我的电脑看youtube,当我在浏览器点击 <a href="http://www.youtube.com,我的电脑服务器会发送一个http请求到达youtube公共服务器，公共服务器接收到请求后会返回一个HTMLFile文件，然后用户在电脑上就会看到youtube上的信息。" target="_blank" rel="noopener">www.youtube.com,我的电脑服务器会发送一个http请求到达youtube公共服务器，公共服务器接收到请求后会返回一个HTMLFile文件，然后用户在电脑上就会看到youtube上的信息。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一些概念：&lt;/p&gt;
&lt;h2 id=&quot;WAN&quot;&gt;&lt;a href=&quot;#WAN&quot; class=&quot;headerlink&quot; title=&quot;WAN:&quot;&gt;&lt;/a&gt;WAN:&lt;/h2&gt;&lt;p&gt;A wide area network (WAN) is a telecommunications n
      
    
    </summary>
    
    
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>BFS搜索和DFS搜索</title>
    <link href="http://yoursite.com/2020/01/08/BFS%E6%90%9C%E7%B4%A2%E5%92%8CDFS%E6%90%9C%E7%B4%A2/"/>
    <id>http://yoursite.com/2020/01/08/BFS搜索和DFS搜索/</id>
    <published>2020-01-08T00:34:01.000Z</published>
    <updated>2020-01-11T12:36:56.396Z</updated>
    
    <content type="html"><![CDATA[<p><strong>宽搜含义：</strong><br>其实宽搜思想也就挺简单，就是从当前节点出发，先遍历完它的相邻节点，再继续遍历它相邻节点的相邻节点(感觉说得有点绕…就是这么个意思)，它是宽度优先，意味着同一层节点优先遍历，再遍历下一层，这样最终导致的结果就是从起点到终点路径最短。<br><strong>操作：</strong><br>它实现发现跟队列实现方式一模一样，具体来说，我们用一个队列 Q 来记录要处理的节点，然后开一个 布尔数组来标记某个节点是否已经访问过了。<br>开始的时候，我们把起点 s 以外的节点的 vis 值设为 0，意思是没有访问过。然后把起点 s 放入队列 Q 中。<br>之后，我们每次从队列 Q 中取出队首的点 u，把 u 相邻的所有点 v 标记为已经访问过了并放入队列 Q。<br>直到某一时刻，队列 Q 为空，这时 BFS 结束。<br><strong>c++代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">void bfs(int u) &#123;</span><br><span class="line">  while (!Q.empty()) Q.pop();</span><br><span class="line">  Q.push(u);</span><br><span class="line">  vis[u] = 1;</span><br><span class="line">  d[u] = 0;</span><br><span class="line">  p[u] = -1;</span><br><span class="line">  while (!Q.empty()) &#123;</span><br><span class="line">    u = Q.pop() &#123;</span><br><span class="line">      for (int i = head[u]; i; i = e[i].x) &#123;</span><br><span class="line">        if (!vis[e[i].t]) &#123;</span><br><span class="line">          Q.push(e[i].t);</span><br><span class="line">          vis[e[i].t] = 1;</span><br><span class="line">          d[e[i].t] = d[u] + 1;</span><br><span class="line">          p[e[i].t] = u;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">void restore(int x) &#123;</span><br><span class="line">  vector&lt;int&gt; res;</span><br><span class="line">  for (int v = x; v != -1; v = p[v]) &#123;</span><br><span class="line">    res.push_back(v);</span><br><span class="line">  &#125;</span><br><span class="line">  std::reverse(res.begin(), res.end());</span><br><span class="line">  for (int i = 0; i &lt; res.size(); ++i) printf(&quot;%d&quot;, res[i]);</span><br><span class="line">  puts(&quot;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>例题的话也特别多，poj上有很多图的例题，不想多说，图的BFS()确实好做很多。这里我想说的是一维数据的bfs搜索。<br>刚开始接触时老是想不出来，老是纠结，这哪是图啊，哪里有图……<br>其实这跟你是解决的这个问题方式有关，在此时，更多是跟起始的每一步转移状态有关。话不多说，来道例题吧。</p><h4 id="poj3126"><a href="#poj3126" class="headerlink" title="poj3126"></a>poj3126</h4><p>大致题意：<br>给定两个四位素数a  b，要求把a变换到b<br>变换的过程要保证  每次变换出来的数都是一个 四位素数，而且当前这步的变换所得的素数  与  前一步得到的素数  只能有一个位不同，而且每步得到的素数都不能重复。<br>求从a到b最少需要的变换次数。无法变换则输出Impossible</p><p><strong>分析：</strong><br>刚开始的时候只想着枚举，但四位数的枚举，那得枚举到啥时候啊，肯定不是个好方法。于是借鉴网上大佬的方法，用宽搜，确实思路大开。<br>从起始目标开始，进行深搜，此时四位数字每次只能每个换一次，实际上每次有四种选择，要么换千位或者百位或者十位或者个位，四个状态，此时就是相当于从根节点出发的遍历第一层节点，然后从每个状态继续这样深搜，注意每个数字被遍历了就要标记下，整个过程用队列实现，很方便。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">AC代码如下：</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">bool visited[10000];</span><br><span class="line">int step[10000];</span><br><span class="line">bool JudgePrimeNum(int temp)&#123;</span><br><span class="line">    if(temp==2 || temp==3)</span><br><span class="line">        return true;</span><br><span class="line">    if(temp&lt;=1 || temp%2==0)</span><br><span class="line">        return false;</span><br><span class="line">    for(int i=3;i*i&lt;=temp;i++)</span><br><span class="line">        if(temp%i==0)</span><br><span class="line">            return false;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">void BFS(int s1,int s2)&#123;</span><br><span class="line">    memset(visited,false,sizeof(visited));</span><br><span class="line">    memset(step,0,sizeof(step));</span><br><span class="line">    queue&lt;int&gt;q;</span><br><span class="line">    q.push(s1);</span><br><span class="line">    visited[s1]=true;</span><br><span class="line">    int temp,t[4],next;//next表示下一个可能的取值</span><br><span class="line">    while(!q.empty())&#123;</span><br><span class="line">        temp=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        if(temp==s2)&#123;</span><br><span class="line">            cout&lt;&lt;step[temp]&lt;&lt;endl;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        t[0]=temp%10;//个位</span><br><span class="line">        t[1]=temp/10%10;//十位</span><br><span class="line">        t[2]=temp/100%10;//百位</span><br><span class="line">        t[3]=temp/1000;//千位</span><br><span class="line">            //改变个位</span><br><span class="line">            for(int i=1;i&lt;=9;i+=2)&#123;</span><br><span class="line">                next=t[3]*1000+t[2]*100+t[1]*10+i;</span><br><span class="line">                if(!visited[next] &amp;&amp; JudgePrimeNum(next))&#123;</span><br><span class="line">                    visited[next]=true;</span><br><span class="line">                    step[next]=step[temp]+1;</span><br><span class="line">                    q.push(next);     </span><br><span class="line">     </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //改变十位</span><br><span class="line">            for(int i=0;i&lt;=9;i++)&#123;</span><br><span class="line">                next=t[3]*1000+t[2]*100+i*10+t[0];</span><br><span class="line">                if(!visited[next] &amp;&amp; JudgePrimeNum(next))&#123;</span><br><span class="line">                    visited[next]=true;</span><br><span class="line">                    step[next]=step[temp]+1;</span><br><span class="line">                    q.push(next); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //改变百位</span><br><span class="line">            for(int i=0;i&lt;=9;i++)&#123;</span><br><span class="line">                next=t[3]*1000+i*100+t[1]*10+t[0];</span><br><span class="line">                if(!visited[next] &amp;&amp; JudgePrimeNum(next))&#123;</span><br><span class="line">                    visited[next]=true;</span><br><span class="line">                    step[next]=step[temp]+1;</span><br><span class="line">                    q.push(next); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //改变千位</span><br><span class="line">            for(int i=1;i&lt;=9;i++)&#123;</span><br><span class="line">                next=i*1000+t[2]*100+t[1]*10+t[0];</span><br><span class="line">                if(!visited[next] &amp;&amp; JudgePrimeNum(next))&#123;</span><br><span class="line">                    visited[next]=true;</span><br><span class="line">                    step[next]=step[temp]+1;</span><br><span class="line">                    q.push(next); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;&quot;Impossible&quot;&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,s1,s2;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    while(n--)&#123;</span><br><span class="line">            cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">            BFS(s1,s2);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过此题确实颇受启发，不要觉得形似的东西才运用同等方法，实际上我们解决问题要深究它内核是什么？我们要找神似的东西，去使用同等方法，才能达到举一反三。<br>补充说一下，其实dfs搜索核心也差不多，找转移方式，找出转移状态。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;宽搜含义：&lt;/strong&gt;&lt;br&gt;其实宽搜思想也就挺简单，就是从当前节点出发，先遍历完它的相邻节点，再继续遍历它相邻节点的相邻节点(感觉说得有点绕…就是这么个意思)，它是宽度优先，意味着同一层节点优先遍历，再遍历下一层，这样最终导致的结果就是从起点到终点路
      
    
    </summary>
    
    
    
      <category term="搜索" scheme="http://yoursite.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>大二上的总结</title>
    <link href="http://yoursite.com/2019/12/25/%E5%A4%A7%E4%BA%8C%E4%B8%8A%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/12/25/大二上的总结/</id>
    <published>2019-12-25T02:47:03.000Z</published>
    <updated>2019-12-25T03:30:05.033Z</updated>
    
    <content type="html"><![CDATA[<p>刚考完大物，学校出的卷子也确实简单，包括前几天的卷子。但是我明白这没啥用啊，我又不是致力于弄绩点的，但是说实话，这个学期技术和算法方面学的并不好，不是学不会，而是进度太慢，以下总结一下吧。<br><strong>完成度：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、《算法入门经典2》也就看完第六章，其中还有一些习题不会做  qwq.</span><br><span class="line">2、《算法导论》主要看了几个算法实现，DP动态规划的，排序的一些算法，基本等同于没看。</span><br><span class="line">3、《数据结构与算法描述：c++版本》其实就把数据结构部分看完，因为此书用c++写数据结构写的非常好，后面的算法部分就比较简略了，室友说可能本书的作者想把此书作为《算法导论》的补充，仔细想想有那么个回事，，</span><br><span class="line">4、《c++ primer》,老实说，虽然这个学期上c++的课，但是我并没学好，此书一半都没看到，虽然的确是本神书。</span><br></pre></td></tr></table></figure></p><p>上学期的遗憾真的是挺多的，我想主要是大二上退了实验室有点不知道咋规划，毕竟在实验室是逼着走的。然后打了不少把OW,浪费了太多时间了，一本树都没看完过，太浪费了。<br>虽然这个学期在寝室学习时间更长，但是我觉得效率确实不高，总是被影响，强忍着不被影响确实很消耗意志力的，如果去其他地方比如图书馆我想必就不用想太多了，我觉得在寝室学确实效率不高，写写代码还行，但是学一些理论的就不够专注啊。<br>总结一下，大二上半年：<br>1、书没看完，学习算法进度和c++语言进度慢。<br>2、游戏打多了，浪费了不少时间。<br>3、容易情绪化。（这当然跟这学期发生的事儿有关了）</p><p>马上寒假要来了，实话实说，想要实现弯道超车，想要实现自己的目标，必须牺牲很多其他时间，毕竟天赋不够啊。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">从今天至整个寒假的安排:</span><br><span class="line">1、《挑战程序设计竞赛》看完中级篇，即看到280面。</span><br><span class="line">2、在poj上刷相应的习题。</span><br><span class="line">3、《算法导论》作为学习部分算法的补充。</span><br><span class="line">4、c++STL要很熟练。</span><br><span class="line">5、对题目进行总结反思，注意算法知识点前后之间的联系，能形成知识网络。</span><br><span class="line">6、做题时不会的题要多想，实在不会先看题解而不是看源码。</span><br></pre></td></tr></table></figure></p><p>明年三月份就蓝桥杯了，也就试一试水，毕竟没有参加过比赛。明年的目标是蓝桥杯能过线，明年的ACM网络赛能通过，能拿到acm现场资格赛。</p><p>哎，学习是任重道远的，真的不能放松自己，处在一个较差的环境就不要和身边人去比了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚考完大物，学校出的卷子也确实简单，包括前几天的卷子。但是我明白这没啥用啊，我又不是致力于弄绩点的，但是说实话，这个学期技术和算法方面学的并不好，不是学不会，而是进度太慢，以下总结一下吧。&lt;br&gt;&lt;strong&gt;完成度：&lt;/strong&gt;&lt;br&gt;&lt;figure class=
      
    
    </summary>
    
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>DFS深度优先搜索</title>
    <link href="http://yoursite.com/2019/12/17/DFS%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    <id>http://yoursite.com/2019/12/17/DFS深度优先搜索/</id>
    <published>2019-12-17T08:35:04.000Z</published>
    <updated>2020-03-18T10:01:06.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DFS深度优先搜索"><a href="#DFS深度优先搜索" class="headerlink" title="DFS深度优先搜索"></a>DFS深度优先搜索</h1><p>（话说很久没更新了…最近在摸鱼）</p><p>dfs 是一种搜索手段。可以理解为：它从某个位置（起点）开始，沿着一条路不断地向前走直到尽头，然后退后一步，去走其它没走过的路，没有的话，再退后一步，再去选择，直到找到目的地（终点）。例如下图：从A（起点）开始走，先走ABD在D处发现没有子节点，推后到节点B，去走EG到节点G发现又到了尽头，然后退一步到节点E，发现节点E没有右节点再退到节点B，发现B的左右节点都走过了，再退到节点A，去走AC节点C没有左子树，走右子树F，F是尽头，退到C，退到A，返回。</p><p><img src="DFS.png" alt="alt text" title="Title"></p><p><strong>DFS属于盲目搜索,最糟糕的情况算法时间复杂度为O(!n)。</strong></p><p><strong>DFS算法框架</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">该DFS 框架以2D 坐标范围为例，来体现DFS 算法的实现思想。</span><br><span class="line">*/</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;cstdlib&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn=100;</span><br><span class="line">bool vst[maxn][maxn]; // 访问标记</span><br><span class="line">int map[maxn][maxn]; // 坐标范围</span><br><span class="line">int dir[4][2]=&#123;0,1,0,-1,1,0,-1,0&#125;; // 方向向量，(x,y)周围的四个方向</span><br><span class="line"></span><br><span class="line">bool CheckEdge(int x,int y) // 边界条件和约束条件的判断</span><br><span class="line">&#123;</span><br><span class="line">    if(!vst[x][y] &amp;&amp; ...) // 满足条件</span><br><span class="line">        return 1;</span><br><span class="line">    else // 与约束条件冲突</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void dfs(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    vst[x][y]=1; // 标记该节点被访问过</span><br><span class="line">    if(map[x][y]==G) // 出现目标态G</span><br><span class="line">    &#123;</span><br><span class="line">        ...... // 做相应处理</span><br><span class="line">    return;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=0;i&lt;4;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(CheckEdge(x+dir[i][0],y+dir[i][1])) // 按照规则生成下一个节点</span><br><span class="line">        dfs(x+dir[i][0],y+dir[i][1]);</span><br><span class="line">    &#125;</span><br><span class="line">    return; // 没有下层搜索节点，回溯</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">题：1代表墙壁，0代表路，求给定数据中从某点出发得到的最大路径途径</span><br><span class="line">如给定数据：</span><br><span class="line">1 0 1 1 0</span><br><span class="line">1 0 0 1 1</span><br><span class="line">1 1 0 0 0</span><br><span class="line">1 0 0 1 1</span><br><span class="line">0 0 1 0 0</span><br><span class="line">代码实现：</span><br><span class="line">#include&lt;iostream&gt;//求能找到的区域</span><br><span class="line">#include&lt;cstring&gt;//包含memset()函数</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int ans=0;//记录步数</span><br><span class="line">const int MAXN=100;</span><br><span class="line">bool visited[MAXN][MAXN];</span><br><span class="line">int map[MAXN][MAXN];</span><br><span class="line">int dir[4][2]=&#123;0,1,0,-1,1,0,-1,0&#125;;//位置移动数组</span><br><span class="line"></span><br><span class="line">bool checkEdg(int x,int y)&#123;</span><br><span class="line">    if(!visited[x][y] &amp;&amp; map[x][y]==0 &amp;&amp; x&gt;=0 &amp;&amp; x&lt;5 &amp;&amp; y&gt;=0 &amp;&amp; y&lt;=5)//当前节点没被访问过</span><br><span class="line">        return true;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">void DFS(int x,int y)&#123;</span><br><span class="line">    visited[x][y]=true;</span><br><span class="line">    for(int i=0;i&lt;4;i++)&#123;</span><br><span class="line">        if(checkEdg(x+dir[i][0],y+dir[i][1]))&#123;//按照规则继续生成下一个节点</span><br><span class="line">            DFS(x+dir[i][0],y+dir[i][1]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return;//没有下一层节点，回溯</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    memset(map,-1,sizeof(map));</span><br><span class="line">    memset(visited,false,sizeof(visited));</span><br><span class="line"></span><br><span class="line">    for(int i=0;i&lt;n;i++)</span><br><span class="line">        for(int j=0;j&lt;m;j++)</span><br><span class="line">            cin&gt;&gt;map[i][j];</span><br><span class="line">    DFS(0,1);//可以选择从任意某个“路口”初始化，但得到的结果是仅从该点出发得到的最大路径</span><br><span class="line">    for(int i=0;i&lt;n;i++)</span><br><span class="line">        for(int j=0;j&lt;m;j++)</span><br><span class="line">            if(visited[i][j])&#123;</span><br><span class="line">                cout&lt;&lt;&quot;i:&quot;&lt;&lt;i&lt;&lt;&quot; j:&quot;&lt;&lt;j&lt;&lt;endl;</span><br><span class="line">                ans++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">    cout&lt;&lt;&quot;the max path：&quot;&lt;&lt;ans;</span><br><span class="line">    return 0; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">**输出结果**</span><br><span class="line">i:0 j:1</span><br><span class="line">i:1 j:1</span><br><span class="line">i:1 j:2</span><br><span class="line">i:2 j:2</span><br><span class="line">i:2 j:3</span><br><span class="line">i:2 j:4</span><br><span class="line">i:3 j:1</span><br><span class="line">i:3 j:2</span><br><span class="line">i:4 j:0</span><br><span class="line">i:4 j:1</span><br><span class="line">the max path：10</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DFS深度优先搜索&quot;&gt;&lt;a href=&quot;#DFS深度优先搜索&quot; class=&quot;headerlink&quot; title=&quot;DFS深度优先搜索&quot;&gt;&lt;/a&gt;DFS深度优先搜索&lt;/h1&gt;&lt;p&gt;（话说很久没更新了…最近在摸鱼）&lt;/p&gt;
&lt;p&gt;dfs 是一种搜索手段。可以理解为：
      
    
    </summary>
    
    
    
      <category term="algorithm 搜索" scheme="http://yoursite.com/tags/algorithm-%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>vector实现二维数组</title>
    <link href="http://yoursite.com/2019/11/22/vector%E5%AE%9E%E7%8E%B0%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2019/11/22/vector实现二维数组/</id>
    <published>2019-11-22T08:29:18.000Z</published>
    <updated>2019-11-22T09:02:42.238Z</updated>
    
    <content type="html"><![CDATA[<p>在运用传统的c++数组往往比较繁琐，同时在进行大量数据存储时往往开不出空间。<br>而c++STL中的vector比数组在封装程度和内存管理方面都更胜一筹。</p><h3 id="传统数组"><a href="#传统数组" class="headerlink" title="传统数组"></a>传统数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int **p;</span><br><span class="line">p = new int*[10];    //注意，int*[10]表示一个有10个元素的指针数组</span><br><span class="line">for (int i = 0; i &lt; 10; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    p[i] = new int[5];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="STL-vector"><a href="#STL-vector" class="headerlink" title="STL vector"></a>STL vector</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>1、利用Vector的push_back函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;int&gt;&gt;vec;</span><br><span class="line">vector&lt;int&gt; a;</span><br><span class="line">a.push_back(1);</span><br><span class="line">a.push_back(2);</span><br><span class="line">a.push_back(3);</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; b;</span><br><span class="line">b.push_back(4);</span><br><span class="line">b.push_back(5);</span><br><span class="line">b.push_back(6);</span><br><span class="line"></span><br><span class="line">vec.push_back(a);</span><br><span class="line">vec.push_back(b);</span><br></pre></td></tr></table></figure></p><p>2、先定义好二维数组，再进行赋值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//得到一个5行3列的数组</span><br><span class="line">//由vector实现的二维数组，可以通过resize()的形式改变行、列值</span><br><span class="line">int i,j;</span><br><span class="line">vector&lt;vector&lt;int&gt;&gt;array(5)</span><br><span class="line">for(int i=0;i&lt;array.size();i++&gt;)</span><br><span class="line">    array.resize(3);</span><br><span class="line">for(int i=0;i&lt;array.size();i++)&#123;</span><br><span class="line">    for(j=0;j&lt;array[0].size();j++)</span><br><span class="line">        array[i][j]=i*j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>1、利用迭代器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void reverse_with_iterator(vector&lt;vector&lt;int&gt;&gt; vec)</span><br><span class="line">&#123;</span><br><span class="line">    if (vec.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;The vector is empty!&quot; &lt;&lt; endl;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;int&gt;::iterator it;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt;::iterator iter;</span><br><span class="line">    vector&lt;int&gt; vec_tmp;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; &quot;Use iterator : &quot; &lt;&lt; endl;</span><br><span class="line">    for(iter = vec.begin(); iter != vec.end(); iter++)</span><br><span class="line">    &#123;</span><br><span class="line">        vec_tmp = *iter;</span><br><span class="line">        for(it = vec_tmp.begin(); it != vec_tmp.end(); it++)</span><br><span class="line">            cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、利用下标进行遍历<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void reverse_with_index(vector&lt;vector&lt;int&gt;&gt; vec)</span><br><span class="line">&#123;</span><br><span class="line">    if (vec.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;The vector is empty!&quot; &lt;&lt; endl;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int i,j;</span><br><span class="line">    cout &lt;&lt; &quot;Use index : &quot; &lt;&lt; endl;</span><br><span class="line">    for (i = 0; i &lt; vec.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j = 0; j &lt; vec[0].size(); j++)</span><br><span class="line">            cout &lt;&lt; vec[i][j] &lt;&lt; &quot; &quot;;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在运用传统的c++数组往往比较繁琐，同时在进行大量数据存储时往往开不出空间。&lt;br&gt;而c++STL中的vector比数组在封装程度和内存管理方面都更胜一筹。&lt;/p&gt;
&lt;h3 id=&quot;传统数组&quot;&gt;&lt;a href=&quot;#传统数组&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
    
      <category term="c++ STL" scheme="http://yoursite.com/tags/c-STL/"/>
    
  </entry>
  
  <entry>
    <title>动态连通问题</title>
    <link href="http://yoursite.com/2019/11/07/%E5%8A%A8%E6%80%81%E8%BF%9E%E9%80%9A%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/11/07/动态连通问题/</id>
    <published>2019-11-07T03:06:11.000Z</published>
    <updated>2020-02-19T13:58:11.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><p>并查集是用来解决所谓动态连通性问题的算法，包含的经典算法有<strong>快速查找</strong>和<strong>快速合并</strong>。</p><h3 id="快速查找"><a href="#快速查找" class="headerlink" title="快速查找"></a>快速查找</h3><pre><code>快速查找对于巨大问题太慢了，通常需要O(n^2)阶时间复杂度。快速查找的连通操作平均时间复杂度为O(N),</code></pre><h3 id="快速合并"><a href="#快速合并" class="headerlink" title="快速合并"></a>快速合并</h3><pre><code>开始时候是以数组形式存储，每个元素元素索引对应的值实际上是其父节点的索引值,形如一个树状数组形式，这对于合并是非常快的，但是仅仅用来查找就非常慢，最坏的情况可要你回溯整棵树。</code></pre><p><strong>以上两种算法都不适合巨大的动态连通问题</strong></p><h3 id="带权快速连通"><a href="#带权快速连通" class="headerlink" title="带权快速连通"></a>带权快速连通</h3><pre><code>这使得根节点与对象的距离大大减小了</code></pre><table><thead><tr><th style="text-align:left">算法</th><th style="text-align:center">初始化</th><th style="text-align:right">连通</th><th style="text-align:right">是否连接</th></tr></thead><tbody><tr><td style="text-align:left">快速查找</td><td style="text-align:center">N</td><td style="text-align:right">N</td><td style="text-align:right">1</td></tr><tr><td style="text-align:left">快速连通</td><td style="text-align:center">N</td><td style="text-align:right">N</td><td style="text-align:right">N</td></tr><tr><td style="text-align:left">带权快速连通</td><td style="text-align:center">N</td><td style="text-align:right">lgN</td><td style="text-align:right">lgN</td></tr></tbody></table><h3 id="一般模板"><a href="#一般模板" class="headerlink" title="一般模板:"></a>一般模板:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#define MAX 100</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int par[MAX];//父亲</span><br><span class="line">int height[MAX];//高度</span><br><span class="line"></span><br><span class="line">//初始化n个元素</span><br><span class="line">void init(int n)&#123;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        par[i]=i;</span><br><span class="line">        height[i]=0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//查找树的根</span><br><span class="line">int find(int x)&#123;</span><br><span class="line">    if(par[x]==x)</span><br><span class="line">        return x;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return find(par[x]);//此处并没有使用路径压缩，所以查找只能递归向上不断查找父节点</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">//合并x和y所属的集合</span><br><span class="line">void merge(int x,int y)&#123;</span><br><span class="line">    x=find(x);</span><br><span class="line">    y=find(y);</span><br><span class="line">    if(x==y)//属于同一个集合</span><br><span class="line">        return;</span><br><span class="line">    if(height[x]&lt;height[y])</span><br><span class="line">        par[x]=y;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        par[y]=x;</span><br><span class="line">        if(height[x]==height[y])//对于高度相同的树，还要高度增加</span><br><span class="line">            height[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">//判断x和y是否属于同一个集合</span><br><span class="line">bool same(int x,int y)&#123;</span><br><span class="line">    return find(x)==find(y);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;并查集&quot;&gt;&lt;a href=&quot;#并查集&quot; class=&quot;headerlink&quot; title=&quot;并查集&quot;&gt;&lt;/a&gt;并查集&lt;/h1&gt;&lt;p&gt;并查集是用来解决所谓动态连通性问题的算法，包含的经典算法有&lt;strong&gt;快速查找&lt;/strong&gt;和&lt;strong&gt;快速合并&lt;/s
      
    
    </summary>
    
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>重装后配置vscode环境</title>
    <link href="http://yoursite.com/2019/11/06/%E9%87%8D%E8%A3%85%E5%90%8E%E9%85%8D%E7%BD%AEvscode%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2019/11/06/重装后配置vscode环境/</id>
    <published>2019-11-06T14:18:10.000Z</published>
    <updated>2019-11-06T14:47:06.933Z</updated>
    
    <content type="html"><![CDATA[<p>挺搞人的，重装后恢复好hexo部署环境再重新配置vscode环境，总是多多少少出些小问题，很多我的无法解释，我只能总结出这些小问题并给出自己的解决方法，原理暂时我是不清楚的…</p><h3 id="1、老文件移植问题"><a href="#1、老文件移植问题" class="headerlink" title="1、老文件移植问题"></a>1、老文件移植问题</h3><p>老文件都是vscode的产物，把之前配置好的文件直接复制过来是没有问题的，但是呢，那个配置文件要注意一下，<strong>tasks.json</strong>和<strong>launch.json</strong>两个调试用的文件不用更改别的，<strong>唯一改的就是 miDebugger的路径，注意这里要与MinGw的路径对应</strong>。</p><p>至于<strong>c_cpp_properties.json</strong>也是要改的，里面的<strong>compilerPath编译器路径</strong>改为 “F:\MinGW\bin\g++.exe”。注意一点，在vscode的配置文件中，你写的路径对否它不会给你提示的，导致我一开始没发现<strong>c_cpp_properties.json</strong>中需要改这个路径，它也没有报错。保存之后，写c++代码竟然给我显示<strong>cout未定义</strong>等等语法错误，但我头文件<code>#include&lt;iostream&gt;</code><br>也有啊，程序都能编译通过并且能调试，这就奇怪了，后来我检查半天，原来路径没写对……</p><h3 id="2、一劳永逸不再配环境"><a href="#2、一劳永逸不再配环境" class="headerlink" title="2、一劳永逸不再配环境"></a>2、一劳永逸不再配环境</h3><p>用vscode写过c/c++都知道，你每生成一个文件夹你都要重新配环境，这非常麻烦，那这咋办呢?<br>其实很简单，以后写的c/c++文件代码作为子目录放在配置好的根目录中，之后就安心写代码吧。</p><h3 id="3、复杂性"><a href="#3、复杂性" class="headerlink" title="3、复杂性"></a>3、复杂性</h3><p>很多人说用vscode写C/C++很麻烦，配置环境也麻烦，也会出各种bug，但是vscode本身就是一个纯编辑器，你要下载gcc/g++编译器，在vscode中还有下载相应的扩展，其实没啥的…</p><p>完结撒花！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;挺搞人的，重装后恢复好hexo部署环境再重新配置vscode环境，总是多多少少出些小问题，很多我的无法解释，我只能总结出这些小问题并给出自己的解决方法，原理暂时我是不清楚的…&lt;/p&gt;
&lt;h3 id=&quot;1、老文件移植问题&quot;&gt;&lt;a href=&quot;#1、老文件移植问题&quot; class
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>重装系统后恢复hexo博客</title>
    <link href="http://yoursite.com/2019/11/06/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E6%81%A2%E5%A4%8Dhexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/11/06/重装系统后恢复hexo博客/</id>
    <published>2019-11-06T09:09:59.000Z</published>
    <updated>2019-11-06T09:10:24.786Z</updated>
    
    <content type="html"><![CDATA[<p>最近写代码连启动vscode都异常卡，此情况出现多次后实在忍不了重装了系统（话说windows现在重装系统真的特别方便）。重装后以前的环境变量啥的都没了写博客该咋办，本人总结一下几个经验。</p><p>1、安装git、node.js,git,hexo<br>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure></p><p>2、配置SSH Key<br>查看C:\Users\用户名.ssh下有无ssh文件夹，没有则创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cd ~/. ssh</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure></p><p>打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：<br><strong>注意这个步骤一定要把id_rsa.pub复制完全，我来来回回弄了好几遍，检查了好几遍，最后才发现是这段文本最后的邮箱账号与实际的少个数字……</strong></p><p>测试是否成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>3、模块安装，执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></p><p>4、部署<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 　hexo g</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p><p>撒花完结！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近写代码连启动vscode都异常卡，此情况出现多次后实在忍不了重装了系统（话说windows现在重装系统真的特别方便）。重装后以前的环境变量啥的都没了写博客该咋办，本人总结一下几个经验。&lt;/p&gt;
&lt;p&gt;1、安装git、node.js,git,hexo&lt;br&gt;执行命令&lt;br
      
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/05/hello-world/"/>
    <id>http://yoursite.com/2019/11/05/hello-world/</id>
    <published>2019-11-05T08:57:14.330Z</published>
    <updated>2017-10-28T00:39:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>pair关系容器的运用</title>
    <link href="http://yoursite.com/2019/11/03/pair%E5%85%B3%E7%B3%BB%E5%AE%B9%E5%99%A8%E7%9A%84%E8%BF%90%E7%94%A8/"/>
    <id>http://yoursite.com/2019/11/03/pair关系容器的运用/</id>
    <published>2019-11-03T02:27:34.000Z</published>
    <updated>2019-11-06T07:55:49.374Z</updated>
    
    <content type="html"><![CDATA[<p>c++pair类型定义在utility头文件中定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;T1,T2&gt;p1;创建一个空的pair对象，它的两个元素类型分别是T1，T2</span><br></pre></td></tr></table></figure></p><h2 id="1、pair的创建和初始化"><a href="#1、pair的创建和初始化" class="headerlink" title="1、pair的创建和初始化"></a>1、pair的创建和初始化</h2><p>pair包含两个数值，与容器一样，在创建对象1时，必须提供两个类型名(类型名不必相同)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;string,string&gt;A;</span><br><span class="line">pair&lt;string,int&gt;B;</span><br><span class="line">pair&lt;string,vector&lt;int&gt;&gt;C;</span><br></pre></td></tr></table></figure></p><p>当然也可以在定义时初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;string,string&gt;A(&quot;James&quot;,&quot;Joy&quot;);</span><br></pre></td></tr></table></figure></p><p>pair类型的使用相当的繁琐，如果定义多个相同的pair类型对象，可以使用typedef简化声明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typedef pair&lt;string,string&gt; A;</span><br><span class="line">A B(&quot;Jordan&quot;,&quot;curry&quot;);</span><br><span class="line">A C(&quot;James&quot;,&quot;kobe&quot;);</span><br></pre></td></tr></table></figure></p><h2 id="2、pair对象的操作"><a href="#2、pair对象的操作" class="headerlink" title="2、pair对象的操作"></a>2、pair对象的操作</h2><p>对于pair类，可以直接访问其数据成员：其成员都是公有的，分别命名为first和second，只需要使用普通的点操作符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.first==&quot;James&quot; &amp;&amp; B.second==&quot;curry&quot;</span><br></pre></td></tr></table></figure></p><h2 id="3、生成新的pair对象"><a href="#3、生成新的pair对象" class="headerlink" title="3、生成新的pair对象"></a>3、生成新的pair对象</h2><p>除了构造函数，标准库还定义了一个make_pair函数，由传递给它的两个实参生成一个新的pair对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;string, string&gt; next_auth;</span><br><span class="line">string first,last;</span><br><span class="line">while(cin&gt;&gt;first&gt;&gt;last) &#123;</span><br><span class="line">    next_auth=make_pair(first,last);</span><br><span class="line">&#125;</span><br><span class="line">等同于</span><br><span class="line">next_auth=pair&lt;string,string&gt;(first,second)</span><br></pre></td></tr></table></figure></p><h2 id="4、例子"><a href="#4、例子" class="headerlink" title="4、例子"></a>4、例子</h2><p>编写程序读入一系列string和int型数据，将每一组存储在一个pair对象中，然后将这些pair对象存储在vector容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;utility&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    pair&lt;string, int&gt;p;</span><br><span class="line">    typedef vector&lt; pair&lt;string, int&gt; &gt; VP;</span><br><span class="line">    VP vp;</span><br><span class="line">    while(cin&gt;&gt;p.first&gt;&gt;p.second)</span><br><span class="line">    &#123;</span><br><span class="line">        vp.push_back(make_pair(p.first,p.second));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    VP::iterator it;</span><br><span class="line">    for(it=vp.begin(); it!=vp.end(); it++)</span><br><span class="line">        cout&lt;&lt;it-&gt;first&lt;&lt;&quot;,&quot;&lt;&lt;it-&gt;second&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;c++pair类型定义在utility头文件中定义&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td
      
    
    </summary>
    
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>线段树概念及其应用</title>
    <link href="http://yoursite.com/2019/10/27/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/10/27/线段树概念及其应用/</id>
    <published>2019-10-27T00:43:40.000Z</published>
    <updated>2019-11-06T07:54:59.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题引出："><a href="#问题引出：" class="headerlink" title="问题引出："></a>问题引出：</h2><p>假如给出一组数组a[n],要求我们求出索引l到r的所有元素之和，其中0&lt;= l &lt;= r &lt;= n;另一个要求是，将数组的特定值修改为x。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>一种方法是进行从l到r的循环，计算给定范围的和，另外更新值只需要令a[i]=x即可。注意第一次操作的时间复杂度为O(n),第二次为O(1)。</p><p>第二种方案为再创建一个数组，数组每个元素表示从0到索引i的所有元素的和。该方法计算求和的时间复杂度为O(1),但更新的时间复杂度却为O(n)。</p><p>以上两种方案在元素个数不同的情况下各有利弊。而第三种方案<strong>线段树</strong>却可以在O(log n)的时间界内完成以上操作。</p><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><p>线段树在区间信息的维护和查询方面运用得十分广泛，得益于它比普通查询更加高效的查询方式。</p><h2 id="线段树的表示形式"><a href="#线段树的表示形式" class="headerlink" title="线段树的表示形式"></a>线段树的表示形式</h2><p>一般而言，谈到树总会习惯性用链表指针的方式来建树表示节点的关系，但是在算法竞赛中，只要节点与节点的关系明晰，常常使用数组的方式来建树，这更容易理解和操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">表示方式：</span><br><span class="line">1、叶子节点是输入的元素的值</span><br><span class="line">2、每个非叶子节点代表也叶子节点的一些合并，代表该非叶子节点下的叶子节点之和。</span><br><span class="line">此处索引是从0开始。</span><br><span class="line">注意：除了最后一集外，每一级都填满。</span><br></pre></td></tr></table></figure><p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/segment-tree1.png" alt="avatar"></p><ul><li>输入形式<blockquote><p>输入数组{1、3、5、7、9、11}</p><p>线段树数组st[]={36、9、27、4、5、16、11、1、3、NULL、NULL、7、9、NULL、NULL}</p></blockquote></li></ul><h2 id="分配给段树的数组的总大小"><a href="#分配给段树的数组的总大小" class="headerlink" title="分配给段树的数组的总大小"></a>分配给段树的数组的总大小</h2><p>如果n是2的幂，则没有虚拟节点(空出来的节点),段树大小为2n-1。如果不是2<br>的幂次，则树的大小将为2x-1，其中x为大于n的2的最小幂。</p><h2 id="查询给定范围"><a href="#查询给定范围" class="headerlink" title="查询给定范围"></a>查询给定范围</h2><ul><li><p>求和算法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int getSum(node,l，r)&#123;</span><br><span class="line">   if(节点在l、r之间)</span><br><span class="line">    return节点的值</span><br><span class="line">  else if(节点在l、r外面)</span><br><span class="line">    return 0</span><br><span class="line">  else</span><br><span class="line">    return getSum(node的左孩子,l,r)+getSum(node的右孩子,l,r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更新节点的值</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题引出：&quot;&gt;&lt;a href=&quot;#问题引出：&quot; class=&quot;headerlink&quot; title=&quot;问题引出：&quot;&gt;&lt;/a&gt;问题引出：&lt;/h2&gt;&lt;p&gt;假如给出一组数组a[n],要求我们求出索引l到r的所有元素之和，其中0&amp;lt;= l &amp;lt;= r &amp;lt;= n
      
    
    </summary>
    
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>关于堆</title>
    <link href="http://yoursite.com/2019/10/12/%E5%85%B3%E4%BA%8E%E5%A0%86/"/>
    <id>http://yoursite.com/2019/10/12/关于堆/</id>
    <published>2019-10-12T08:10:30.000Z</published>
    <updated>2019-11-07T03:06:50.591Z</updated>
    
    <content type="html"><![CDATA[<p>堆一般为二叉堆，它是一个完全二叉树，基于这个性质，我们采用数组表示堆会节省空间。<br>另外实现优先队列的方法是使用二叉查找树。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;堆一般为二叉堆，它是一个完全二叉树，基于这个性质，我们采用数组表示堆会节省空间。&lt;br&gt;另外实现优先队列的方法是使用二叉查找树。&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="数据结构与算法 二叉树" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>c++new和delete用法总结</title>
    <link href="http://yoursite.com/2019/09/21/c-new%E5%92%8Cdelete%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/09/21/c-new和delete用法总结/</id>
    <published>2019-09-21T09:24:06.000Z</published>
    <updated>2019-09-21T09:51:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间在用练习数据结构的题目，碰到删除节点的问题。有些问题值得去探讨。</p><p>1、在c标准库里，一般是用free<br>函数进行动态释放内存空间，free掉了，这个节点的信息都没了，包括本身。<strong>但在c++使用delete函数却不一样</strong>，<strong>它的意思使代表删除p所指的目标（变量或对象），释放所指目标的堆空间，而不是删除p节点本身，p节点本身的地址空间还在，不过此时它变成了空指针。</strong></p><p>2、new/delete都是同时出现的。new开辟了存放类型的存储空间，返回指向该内存空间的地址。（即指针）</p><p>3、new/delete除了分配空间还会调用构造析构函数进行初始化与清理（清理成员）。</p><p>4、 delete只能释放堆空间。如果new返回的指针值丢失，则所分配的堆空间无法回收，称内存泄漏，同一空间重复释放也是危险的，因为该空间可能已另分配，所以必须妥善保存new返回的指针，以保证不发生内存泄漏，也必须保证不会重复释放堆内存空间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这段时间在用练习数据结构的题目，碰到删除节点的问题。有些问题值得去探讨。&lt;/p&gt;
&lt;p&gt;1、在c标准库里，一般是用free&lt;br&gt;函数进行动态释放内存空间，free掉了，这个节点的信息都没了，包括本身。&lt;strong&gt;但在c++使用delete函数却不一样&lt;/strong&gt;
      
    
    </summary>
    
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++拷贝构造函数和赋值运算符</title>
    <link href="http://yoursite.com/2019/09/08/c-%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2019/09/08/c-拷贝构造函数和赋值运算符/</id>
    <published>2019-09-08T03:13:06.000Z</published>
    <updated>2019-11-06T07:55:21.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="c-拷贝构造函数"><a href="#c-拷贝构造函数" class="headerlink" title="c++拷贝构造函数"></a>c++拷贝构造函数</h2><h3 id="一、聊聊深拷贝和浅拷贝的问题"><a href="#一、聊聊深拷贝和浅拷贝的问题" class="headerlink" title="一、聊聊深拷贝和浅拷贝的问题"></a>一、聊聊深拷贝和浅拷贝的问题</h3><p>一般的，只要出现类复制的情况，就会调用拷贝构造函数。</p><blockquote><p>1、对象作为函数的参数，以值传递的方式传给函数</p></blockquote><blockquote><p>2、对象作为函数的返回值，以值的方式从函数返回</p></blockquote><blockquote><p>3、使用一个对象给另一个对象初始化</p></blockquote><h3 id="两个区别"><a href="#两个区别" class="headerlink" title="两个区别"></a><strong>两个区别</strong></h3><p>1  在未定义显示拷贝构造函数的情况下，系统会调用默认的拷贝函数——即浅拷贝，<br>它能够完成成员的一一复制。当数据成员中没有指针时，浅拷贝是可行的；但当数<br>据成员中有指针时，<strong>如果采用简单的浅拷贝，则两类中的两个指针将指向同一个地址</strong>，<br>当对象快结束时，会调用两次析构函数，而导致指针悬挂现象，所以，此时，必须采用深拷贝。</p><p>2 深拷贝与浅拷贝的区别就在于深拷贝会在堆内存中另外申请空间来储存数据，从而也就解决了指<br>针悬挂的问题。简而言之，当数据成员中有指针时，必须要用深拷贝。</p><p><strong>总结：</strong>深拷贝和浅拷贝的区别是在对象状态中包含其它对象的引用的时候，当拷贝一个对象时，<br>如果需要拷贝这个对象引用的对象，则是深拷贝，否则是浅拷贝。</p><h3 id="二、拷贝构造函数和赋值运算符"><a href="#二、拷贝构造函数和赋值运算符" class="headerlink" title="二、拷贝构造函数和赋值运算符"></a>二、拷贝构造函数和赋值运算符</h3><blockquote><p>1、 拷贝构造函数和赋值运算符的行为比较相似（即将一个对象的值复制给另一个对象），<br>但产生的结果却是不同的，即拷贝构造函数使用传入的值生成一个新的对象的实例，而<br>赋值运算符是将对象的值复制给已经存在的实例。</p></blockquote><blockquote><p>2、区分是调用拷贝构造函数还是赋值运算符，主要是否有新的对象产生。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Person&#123;</span><br><span class="line">public:</span><br><span class="line">Person()&#123;&#125;</span><br><span class="line">Person(const Person&amp; p)&#123;</span><br><span class="line">cout&lt;&lt;&quot;copy constructor&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">Person&amp; operator=(constPerson&amp; p)&#123;</span><br><span class="line">cout &lt;&lt; &quot;assign&quot; &lt;&lt; endl;</span><br><span class="line">return *this;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">void f(Person p)&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">Person f1()&#123;</span><br><span class="line">Person p;</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">Person p;</span><br><span class="line">Person p1 = p;//1  &quot;copy constructor&quot;</span><br><span class="line"></span><br><span class="line">Person p2;</span><br><span class="line">p2 = p;//2  &quot;assign&quot;</span><br><span class="line"></span><br><span class="line">f(p2);//3&quot;copy constructor&quot;</span><br><span class="line"></span><br><span class="line">p2 = f1();//4&quot;copy constructor&quot; and &quot;assign&quot;</span><br><span class="line"></span><br><span class="line">Person p3 = f1();//5 &quot;copy constructor&quot;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析如下：</strong></p><p>1这是虽然使用了”=”，但是实际上使用对象p来创建一个新的对象p1。也就是产生了新的对象，所以调用的是拷贝构造函数。</p><p>2首先声明一个对象p2，然后使用赋值运算符”=”，将p的值复制给p2，显然是调用赋值运算符，为一个已经存在的对象赋值 。</p><p>3以值传递的方式将对象p2传入函数f内，调用拷贝构造函数构建一个函数f可用的实参。</p><p>4这条语句拷贝构造函数和赋值运算符都调用了。函数f1以值的方式返回一个Person对象，在返回时会调用拷贝构造函数创建一个临时对象tmp作为返回值；返回后调用赋值运算符将临时对象tmp赋值给p2.</p><p>5按照4的解释，应该是首先调用拷贝构造函数创建临时对象；然后再调用拷贝构造函数使用刚才创建的临时对象创建新的对象p3，也就是会调用两次拷贝构造函数。不过，编译器也没有那么傻，应该是直接调用拷贝构造函数使用返回值创建了对象p3。</p><p><strong>辨别构造函数、拷贝构造函数和赋值构造函数</strong></p><p>虽然三个函数的行为方式很相似，但是可以轻易地用以下方法辨别出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对象不存在的，且没用别的对象初始化的，就是调用了(默认)构造函数</span><br><span class="line"></span><br><span class="line">对象不存在的，且使用了别的对象初始化的，就是调用了拷贝构造函数</span><br><span class="line"></span><br><span class="line">对象存在的，且用别的对象来给它赋值的，就是赋值函数。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;c-拷贝构造函数&quot;&gt;&lt;a href=&quot;#c-拷贝构造函数&quot; class=&quot;headerlink&quot; title=&quot;c++拷贝构造函数&quot;&gt;&lt;/a&gt;c++拷贝构造函数&lt;/h2&gt;&lt;h3 id=&quot;一、聊聊深拷贝和浅拷贝的问题&quot;&gt;&lt;a href=&quot;#一、聊聊深拷贝和浅拷贝的问
      
    
    </summary>
    
    
      <category term="c++" scheme="http://yoursite.com/categories/c/"/>
    
    
      <category term="c++ 五大函数" scheme="http://yoursite.com/tags/c-%E4%BA%94%E5%A4%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>c++构造函数、拷贝构造函数等</title>
    <link href="http://yoursite.com/2019/09/06/c-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%AD%89/"/>
    <id>http://yoursite.com/2019/09/06/c-构造函数、拷贝构造函数等/</id>
    <published>2019-09-06T11:58:13.000Z</published>
    <updated>2019-11-06T07:55:15.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="c-构造函数、拷贝构造函数等五大函数"><a href="#c-构造函数、拷贝构造函数等五大函数" class="headerlink" title="c++构造函数、拷贝构造函数等五大函数"></a>c++构造函数、拷贝构造函数等五大函数</h1><p>为了更清晰了解之后的语法格式，在此之前，首先讲讲<strong>类成员的初始化</strong></p><p>定义一个类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Fruit               //定义一个类，名字叫Fruit  </span><br><span class="line">&#123;  </span><br><span class="line">public:  </span><br><span class="line">    Fruit(const string &amp;name):Fname(name)&#123;&#125;  </span><br><span class="line">private:</span><br><span class="line"> const string Fname;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>一般而言，有两种形式的初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">Fruit(const string &amp;name):Fname(name)&#123;&#125;</span><br><span class="line">推荐使用此种构造方法，成员变量先初始化，再执行块。在这里先是执行了Fname(name),然后再把string name定义为const。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2</span><br><span class="line">Fruit(const string &amp;name):()&#123;</span><br><span class="line">    Fname=name;</span><br><span class="line">&#125;</span><br><span class="line">这里初始化后再对Fname=name进行赋值，则会提示不能给常量赋值的错误</span><br></pre></td></tr></table></figure><p>3<br>注意，在c++中，结构体和类的使用已经没有什么区别，所以结构体成员最好一开始就进行结构体成员初始化。形如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct Node</span><br><span class="line">&#123;</span><br><span class="line">object data;</span><br><span class="line">Node *next;</span><br><span class="line"></span><br><span class="line">Node(const object &amp; d=0,Node *n=NULL):data(d),next(n)&#123;&#125;//节点的构造函数</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;c-构造函数、拷贝构造函数等五大函数&quot;&gt;&lt;a href=&quot;#c-构造函数、拷贝构造函数等五大函数&quot; class=&quot;headerlink&quot; title=&quot;c++构造函数、拷贝构造函数等五大函数&quot;&gt;&lt;/a&gt;c++构造函数、拷贝构造函数等五大函数&lt;/h1&gt;&lt;p&gt;为了更清
      
    
    </summary>
    
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>const指针的理解</title>
    <link href="http://yoursite.com/2019/09/03/const%E6%8C%87%E9%92%88%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/03/const指针的理解/</id>
    <published>2019-09-02T23:43:53.000Z</published>
    <updated>2019-11-06T07:55:29.827Z</updated>
    
    <content type="html"><![CDATA[<p>这几天在学算法竞赛，突然常常碰见类似这样的函数体<code>(const vector&lt;int&gt;&amp; A)</code>,本来我一开始不明白为什么要用<strong>&amp;</strong> ,我也不太清楚<strong>const</strong>有什么作用。后来去查了些资料，发现<strong>const</strong>关键字是真的挺常用的，而后的<strong>&amp;</strong> 也是和<strong>const</strong>相关的。</p><p>以下就来举例出常见的几个<code>const</code>用法</p><h1 id="const-T"><a href="#const-T" class="headerlink" title="const  T"></a><code>const  T</code></h1><p>定义一个常量，声明的同时必须进行初始化，一旦声明之后该值就不能改变。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int i=5;</span><br><span class="line">const int i2=10;    //正确</span><br><span class="line">const int i3=i;    //正确</span><br><span class="line">/i2=20;             //错误，常量值不能改变</span><br><span class="line">/const int i4;      //错误，未被初始化</span><br></pre></td></tr></table></figure></p><h1 id="const-T-1"><a href="#const-T-1" class="headerlink" title="const T*"></a><code>const T*</code></h1><p>指向常量的指针，不能用于改变其所指向对象的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const int i=5;</span><br><span class="line">const int i2=10;</span><br><span class="line">const int* p=&amp;i;    //正确，指向一个const int对象，即i的地址</span><br><span class="line">/*p=10;             //错误，不能改变其所指向的对象。</span><br><span class="line">p=&amp;i2;              //正确，改变指针本身的值，此时p指向的是i2的地址。</span><br></pre></td></tr></table></figure></p><h1 id="const-int-和int-const的区别"><a href="#const-int-和int-const的区别" class="headerlink" title="const int*和int *const的区别"></a><code>const int*</code>和<code>int *const</code>的区别</h1><p>把指针定义未常量就是常量指针，也就是int *const类型，声明的同时必须进行初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const int*指针指向的对象不可改变，但可以改变指针本身的值</span><br><span class="line">const int i1=5;</span><br><span class="line">const int i2=10;</span><br><span class="line">const int* p=&amp;i1;</span><br><span class="line">/*p=20;         //错误，不能改变p所指对象的值</span><br><span class="line">p=&amp;i2           //正确，可以改变指针本身的值，即此时指针指向i2</span><br><span class="line"></span><br><span class="line">int* const 指针本身的值不可改变，但其指向的对象可以改变</span><br><span class="line">int v1=10;</span><br><span class="line">int v2=20;</span><br><span class="line">int* const p=&amp;v1;</span><br><span class="line">/p=&amp;v2;     //错误，不能改变p指针本身的值</span><br><span class="line">*p=30;      //正确，可以改变所指对象的值，此时v1=30</span><br></pre></td></tr></table></figure></p><h1 id="const-T-amp"><a href="#const-T-amp" class="headerlink" title="const T&amp;"></a><code>const T&amp;</code></h1><p>对常量的引用，称为常量引用，不能修改其绑定的值。</p><h1 id="在函数中的应用"><a href="#在函数中的应用" class="headerlink" title="在函数中的应用"></a>在函数中的应用</h1><h2 id="1-希望传入一个对象，又不想让函数体修改这个对象。"><a href="#1-希望传入一个对象，又不想让函数体修改这个对象。" class="headerlink" title="1 希望传入一个对象，又不想让函数体修改这个对象。"></a>1 希望传入一个对象，又不想让函数体修改这个对象。</h2><h3 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void xxx(const Data&amp; data)&#123;</span><br><span class="line">  cout&lt;&lt;data.value&lt;&lt;endl;</span><br><span class="line">  /data.value=5;    //错误，data是常量，不能改变修改的值</span><br><span class="line">&#125;</span><br><span class="line">该方式还有一个好处，就是在函数调用时传递的是对象的引用，而不是对象，减少函数调用时对象赋值的开销。</span><br></pre></td></tr></table></figure><h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void xxx(const Data* p)&#123;&#125;</span><br><span class="line">和方式1功能相同</span><br></pre></td></tr></table></figure><h1 id="对于常量函数"><a href="#对于常量函数" class="headerlink" title="对于常量函数"></a><strong>对于常量函数</strong></h1><p>1、C++中引入常量函数，是c++的一个特性，充分体现了c++的封装性。</p><p>2、C++中，为了防止类的数据成员被非法访问，将类的成员函数分成了两类，一类是常量成员函数（也被称为观察着）；另一类是非常量成员函数（也被成为变异者）。</p><p>3、在一个函数的签名后面加上关键字const后该函数就成了常量函数。对于常量函数，最关键的不同是编译器不允许其修改类的数据成员</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这几天在学算法竞赛，突然常常碰见类似这样的函数体&lt;code&gt;(const vector&amp;lt;int&amp;gt;&amp;amp; A)&lt;/code&gt;,本来我一开始不明白为什么要用&lt;strong&gt;&amp;amp;&lt;/strong&gt; ,我也不太清楚&lt;strong&gt;const&lt;/strong&gt;有
      
    
    </summary>
    
    
      <category term="c++" scheme="http://yoursite.com/categories/c/"/>
    
    
      <category term="指针 const关键字" scheme="http://yoursite.com/tags/%E6%8C%87%E9%92%88-const%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
  </entry>
  
</feed>
